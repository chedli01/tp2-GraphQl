type CV {
  id: ID!
  name: String!
  age: Int!
  job: String!
  owner: User!
  skills: [Skill!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  role: String
  cvs: [CV!]
}

type Skill {
  id: ID!
  designation: String!
  cvs: [CV!]
}

type Query {
  hello(name: String!): String!
  getCVs: [CV]!
  getCV(id: Int!): CV!
}

input CreateCVInput {
  name: String!
  age: Int!
  job: String!
  ownerId: Int!
  skillIds: [Int!]!
}

input UpdateCVInput {
  name: String
  age: Int
  job: String
  skillIds: [Int!]
}

input CreateUserInput {
  name: String!
  email: String!
  role: String!
}

input CreateSkillInput {
  designation: String!
}

type Mutation {
  createCV(input: CreateCVInput!): CV!
  updateCV(id: ID!, input: UpdateCVInput!): CV!
  deleteCV(id: ID!): Boolean!
  createUser(input: CreateUserInput!): User!
  createSkill(input: CreateSkillInput!): Skill!
}

enum CvEventType {
  CREATED
  UPDATED
  DELETED
}

type CvEventPayload {
  type: CvEventType!
  cv: CV!
}

type Subscription {
  cvEvent: CvEventPayload!
}